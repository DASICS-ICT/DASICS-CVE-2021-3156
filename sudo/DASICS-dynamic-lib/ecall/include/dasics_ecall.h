#ifndef _INCLUDE_DASICS_ECALL_H
#define _INCLUDE_DASICS_ECALL_H

#include <fcntl.h>
#include <dirent.h>
#include <fcntl.h>
#include <syscall_number.h>
#include <stdint.h>
// #include <stdlib.h>
/*
 * The ecall check struct
 */
typedef struct ecall_check
{
    int (*check)(unsigned long, \
                 unsigned long, \
                 unsigned long, \
                 unsigned long, \ 
                 unsigned long, \
                 unsigned long, \
                 unsigned long, \
                 unsigned long);
    int (*handle_error)();

} ecall_check_t;

extern ecall_check_t syscall_check[__NR_syscalls];


// struct linux_dirent64 {
//     ino64_t        d_ino;    // inode number
//     off64_t        d_off;    // offset to the next dirent
//     unsigned short d_reclen; // length of this dirent
//     unsigned char  d_type;   // type of file (DT_*)
//     char           d_name[]; // filename (null-terminated)
// };

int default_ecall_check_handler(uint64_t a0, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7);
void default_ecall_error_handler();
void init_syscall_check();

int ecall_check_openat(int dirfd, const char *pathname, int flags, mode_t mode);

int ecall_check_getdents64(unsigned int fd, void * linux_dirent64_dirp, unsigned int count);

int ecall_check_fstatat(int dirfd, const char *pathname, struct stat * stat_buf, int flags);

int ecall_check_setuid(int uid);
int ecall_check_setgid(int gid);
int ecall_check_execve(char * filename, char* argv[], char * envp[]);

void neglect_ecal_handler(void * regs);

#endif
#include <asm/regs.h>
#include <asm/ucsr.h>
#include <asm/asm.h>
.macro SAVE_CONTEXT
    addi sp, sp, -(OFFSET_SIZE)
    /* save all general purpose registers here! */
    // return address
    sd ra, OFFSET_REG_RA(sp)

    // pointers, sp and tp will be handled later
    sd gp, OFFSET_REG_GP(sp)
    sd tp, OFFSET_REG_TP(sp)

    // temporary
    sd t0, OFFSET_REG_T0(sp)
    sd t1, OFFSET_REG_T1(sp)
    sd t2, OFFSET_REG_T2(sp)

    mv t0, sp 
    addi t0, t0, OFFSET_SIZE
    sd t0, OFFSET_REG_SP(sp)

    // saved register
    sd s0, OFFSET_REG_S0(sp)
    sd s1, OFFSET_REG_S1(sp)

    // args
    sd a0, OFFSET_REG_A0(sp)
    sd a1, OFFSET_REG_A1(sp)
    sd a2, OFFSET_REG_A2(sp)
    sd a3, OFFSET_REG_A3(sp)
    sd a4, OFFSET_REG_A4(sp)
    sd a5, OFFSET_REG_A5(sp)
    sd a6, OFFSET_REG_A6(sp)
    sd a7, OFFSET_REG_A7(sp)

    // saved register
    sd s2, OFFSET_REG_S2(sp)
    sd s3, OFFSET_REG_S3(sp)
    sd s4, OFFSET_REG_S4(sp)
    sd s5, OFFSET_REG_S5(sp)
    sd s6, OFFSET_REG_S6(sp)
    sd s7, OFFSET_REG_S7(sp)
    sd s8, OFFSET_REG_S8(sp)
    sd s9, OFFSET_REG_S9(sp)
    sd s10, OFFSET_REG_S10(sp)
    sd s11, OFFSET_REG_S11(sp)

    // temporary register
    sd t3, OFFSET_REG_T3(sp)
    sd t4, OFFSET_REG_T4(sp)
    sd t5, OFFSET_REG_T5(sp)
    sd t6, OFFSET_REG_T6(sp)    

    addi sp, sp, -(OFFSET_N_EXTENSION)

//    csrr t0, CSR_USTATUS
//    sd t0, OFFSET_REG_USTATUS(sp)

    csrr t0, CSR_UIE
    sd t0, OFFSET_REG_UIE(sp)

    csrr t0, CSR_UTVEC
    sd t0, OFFSET_REG_UTVEC(sp)

    csrr t0, CSR_USCRATCH
    sd t0, OFFSET_REG_USCRATCH(sp)

    csrr t0, CSR_UEPC
    sd t0, OFFSET_REG_UEPC(sp)

    csrr t0, CSR_UCAUSE
    sd t0, OFFSET_REG_UCAUSE(sp)

    csrr t0, CSR_UTVAL
    sd t0, OFFSET_REG_UBADADDR(sp)

    csrr t0, CSR_UIP
    sd t0, OFFSET_REG_UIP(sp)       

    addi sp, sp, -(OFFSET_DASICS)

    csrr t0, CSR_DLCFG
    sd t0, OFFSET_DASICSLIBCFG(sp)

    csrr t0, CSR_DLBOUND0LO
    sd t0, OFFSET_DASICSLIBBOUNDS0(sp)

    csrr t0, CSR_DLBOUND0HI
    sd t0, OFFSET_DASICSLIBBOUNDS1(sp)

    csrr t0, CSR_DLBOUND1LO
    sd t0, OFFSET_DASICSLIBBOUNDS2(sp)

    csrr t0, CSR_DLBOUND1HI
    sd t0, OFFSET_DASICSLIBBOUNDS3(sp)

    csrr t0, CSR_DLBOUND2LO
    sd t0, OFFSET_DASICSLIBBOUNDS4(sp)

    csrr t0, CSR_DLBOUND2HI
    sd t0, OFFSET_DASICSLIBBOUNDS5(sp)

    csrr t0, CSR_DLBOUND3LO
    sd t0, OFFSET_DASICSLIBBOUNDS6(sp)

    csrr t0, CSR_DLBOUND3HI
    sd t0, OFFSET_DASICSLIBBOUNDS7(sp)

    csrr t0, CSR_DLBOUND4LO
    sd t0, OFFSET_DASICSLIBBOUNDS8(sp)

    csrr t0, CSR_DLBOUND4HI
    sd t0, OFFSET_DASICSLIBBOUNDS9(sp)

    csrr t0, CSR_DLBOUND5LO
    sd t0, OFFSET_DASICSLIBBOUNDS10(sp)

    csrr t0, CSR_DLBOUND5HI
    sd t0, OFFSET_DASICSLIBBOUNDS11(sp)

    csrr t0, CSR_DLBOUND6LO
    sd t0, OFFSET_DASICSLIBBOUNDS12(sp)

    csrr t0, CSR_DLBOUND6HI
    sd t0, OFFSET_DASICSLIBBOUNDS13(sp)

    csrr t0, CSR_DLBOUND7LO
    sd t0, OFFSET_DASICSLIBBOUNDS14(sp)

    csrr t0, CSR_DLBOUND7HI
    sd t0, OFFSET_DASICSLIBBOUNDS15(sp)

    csrr t0, CSR_DLBOUND8LO
    sd t0, OFFSET_DASICSLIBBOUNDS16(sp)

    csrr t0, CSR_DLBOUND8HI
    sd t0, OFFSET_DASICSLIBBOUNDS17(sp)

    csrr t0, CSR_DLBOUND9LO
    sd t0, OFFSET_DASICSLIBBOUNDS18(sp)

    csrr t0, CSR_DLBOUND9HI 
    sd t0, OFFSET_DASICSLIBBOUNDS19(sp)

    csrr t0, CSR_DLBOUND10LO
    sd t0, OFFSET_DASICSLIBBOUNDS20(sp)

    csrr t0, CSR_DLBOUND10HI
    sd t0, OFFSET_DASICSLIBBOUNDS21(sp)

    csrr t0, CSR_DLBOUND11LO
    sd t0, OFFSET_DASICSLIBBOUNDS22(sp)

    csrr t0, CSR_DLBOUND11HI
    sd t0, OFFSET_DASICSLIBBOUNDS23(sp)

    csrr t0, CSR_DLBOUND12LO
    sd t0, OFFSET_DASICSLIBBOUNDS24(sp)

    csrr t0, CSR_DLBOUND12HI
    sd t0, OFFSET_DASICSLIBBOUNDS25(sp)

    csrr t0, CSR_DLBOUND13LO
    sd t0, OFFSET_DASICSLIBBOUNDS26(sp)

    csrr t0, CSR_DLBOUND13HI
    sd t0, OFFSET_DASICSLIBBOUNDS27(sp)

    csrr t0, CSR_DLBOUND14LO
    sd t0, OFFSET_DASICSLIBBOUNDS28(sp)

    csrr t0, CSR_DLBOUND14HI
    sd t0, OFFSET_DASICSLIBBOUNDS29(sp)

    csrr t0, CSR_DLBOUND15LO
    sd t0, OFFSET_DASICSLIBBOUNDS30(sp)

    csrr t0, CSR_DLBOUND15HI
    sd t0, OFFSET_DASICSLIBBOUNDS31(sp)

    csrr t0, CSR_DJCFG
    sd t0, OFFSET_DASICSJMPCFG(sp)

    csrr t0, CSR_DJBOUND0LO
    sd t0, OFFSET_DASICSJMPBOUND0(sp)

    csrr t0, CSR_DJBOUND0HI
    sd t0, OFFSET_DASICSJMPBOUND1(sp)    

    csrr t0, CSR_DJBOUND1LO
    sd t0, OFFSET_DASICSJMPBOUND2(sp)

    csrr t0, CSR_DJBOUND1HI
    sd t0, OFFSET_DASICSJMPBOUND3(sp)    

    csrr t0, CSR_DJBOUND2LO
    sd t0, OFFSET_DASICSJMPBOUND4(sp)

    csrr t0, CSR_DJBOUND2HI
    sd t0, OFFSET_DASICSJMPBOUND5(sp) 

    csrr t0, CSR_DJBOUND3LO
    sd t0, OFFSET_DASICSJMPBOUND6(sp)

    csrr t0, CSR_DJBOUND3HI
    sd t0, OFFSET_DASICSJMPBOUND7(sp) 

    csrr t0, CSR_DMAINCALL
    sd t0, OFFSET_DASICSMAINCALLENTRY(sp)

    csrr t0, CSR_DRETURNPC
    sd t0, OFFSET_DASICSRETURNPC(sp)

    csrr t0, CSR_DFZRETURN
    sd t0, OFFSET_DASICSFREEZONERETURNPC(sp)     

.endm

.macro RESTORE_CONTEXT

    ld t0, OFFSET_DASICSLIBCFG(sp)
    csrw CSR_DLCFG, t0

    ld t0, OFFSET_DASICSLIBBOUNDS0(sp)
    csrw CSR_DLBOUND0LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS1(sp)
    csrw CSR_DLBOUND0HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS2(sp)
    csrw CSR_DLBOUND1LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS3(sp)
    csrw CSR_DLBOUND1HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS4(sp)
    csrw CSR_DLBOUND2LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS5(sp)
    csrw CSR_DLBOUND2HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS6(sp)
    csrw CSR_DLBOUND3LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS7(sp)
    csrw CSR_DLBOUND3HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS8(sp)
    csrw CSR_DLBOUND4LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS9(sp)
    csrw CSR_DLBOUND4HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS10(sp)
    csrw CSR_DLBOUND5LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS11(sp)
    csrw CSR_DLBOUND5HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS12(sp)
    csrw CSR_DLBOUND6LO, t0
    
    ld t0, OFFSET_DASICSLIBBOUNDS13(sp)
    csrw CSR_DLBOUND6HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS14(sp)
    csrw CSR_DLBOUND7LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS15(sp)
    csrw CSR_DLBOUND7HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS16(sp)
    csrw CSR_DLBOUND8LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS17(sp)
    csrw CSR_DLBOUND8HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS18(sp)
    csrw CSR_DLBOUND9LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS19(sp)
    csrw CSR_DLBOUND9HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS20(sp)
    csrw CSR_DLBOUND10LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS21(sp)
    csrw CSR_DLBOUND10HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS22(sp)
    csrw CSR_DLBOUND11LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS23(sp)
    csrw CSR_DLBOUND11HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS24(sp)
    csrw CSR_DLBOUND12LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS25(sp)
    csrw CSR_DLBOUND12HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS26(sp)
    csrw CSR_DLBOUND13LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS27(sp)
    csrw CSR_DLBOUND13HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS28(sp)
    csrw CSR_DLBOUND14LO, t0

    ld t0, OFFSET_DASICSLIBBOUNDS29(sp)
    csrw CSR_DLBOUND14HI, t0

    ld t0, OFFSET_DASICSLIBBOUNDS30(sp)
    csrw CSR_DLBOUND15LO, t0

    ld t0, OFFSET_DASICSJMPCFG(sp)
    csrw CSR_DJCFG, t0

    ld t0, OFFSET_DASICSJMPBOUND0(sp)
    csrw CSR_DJBOUND0LO, t0 
    
    ld t0, OFFSET_DASICSJMPBOUND1(sp)
    csrw CSR_DJBOUND0HI, t0 

    ld t0, OFFSET_DASICSJMPBOUND2(sp)
    csrw CSR_DJBOUND1LO, t0 
    
    ld t0, OFFSET_DASICSJMPBOUND3(sp)
    csrw CSR_DJBOUND1HI, t0    

    ld t0, OFFSET_DASICSJMPBOUND4(sp)
    csrw CSR_DJBOUND2LO, t0 
    
    ld t0, OFFSET_DASICSJMPBOUND5(sp)
    csrw CSR_DJBOUND2HI, t0 

    ld t0, OFFSET_DASICSJMPBOUND6(sp)
    csrw CSR_DJBOUND3LO, t0 
    
    ld t0, OFFSET_DASICSJMPBOUND7(sp)
    csrw CSR_DJBOUND3HI, t0 

    ld t0, OFFSET_DASICSLIBBOUNDS31(sp)
    csrw CSR_DLBOUND15HI, t0

    ld t0, OFFSET_DASICSMAINCALLENTRY(sp)
    csrw CSR_DMAINCALL, t0

    ld t0, OFFSET_DASICSRETURNPC(sp)
    csrw CSR_DRETURNPC, t0 

    ld t0, OFFSET_DASICSFREEZONERETURNPC(sp)   
    csrw CSR_DFZRETURN, t0

    addi sp, sp, OFFSET_DASICS   

//    ld t0, OFFSET_REG_USTATUS(sp)
//    csrw CSR_USTATUS, t0 

    ld t0, OFFSET_REG_UIE(sp)
    csrw CSR_UIE, t0 
    
    ld t0, OFFSET_REG_UTVEC(sp)
    csrw CSR_UTVEC, t0 

    ld t0, OFFSET_REG_USCRATCH(sp)
    csrw CSR_USCRATCH, t0
    
    ld t0, OFFSET_REG_UEPC(sp)
    csrw CSR_UEPC, t0 

    ld t0, OFFSET_REG_UCAUSE(sp)
    csrw CSR_UCAUSE, t0 

    ld t0, OFFSET_REG_UBADADDR(sp)
    csrw CSR_UTVAL, t0 

    ld t0, OFFSET_REG_UIP(sp)   
    csrw CSR_UIP, t0

    addi sp, sp, OFFSET_N_EXTENSION    

    // return address
    ld ra, OFFSET_REG_RA(sp)

    // pointers, sp will be handled later
    ld gp, OFFSET_REG_GP(sp)
    ld tp, OFFSET_REG_TP(sp)

    // temporary
    ld t0, OFFSET_REG_T0(sp)
    ld t1, OFFSET_REG_T1(sp)
    ld t2, OFFSET_REG_T2(sp)

    // saved register
    ld s0, OFFSET_REG_S0(sp)
    ld s1, OFFSET_REG_S1(sp)

    // args
    ld a0, OFFSET_REG_A0(sp)
    ld a1, OFFSET_REG_A1(sp)
    ld a2, OFFSET_REG_A2(sp)
    ld a3, OFFSET_REG_A3(sp)
    ld a4, OFFSET_REG_A4(sp)
    ld a5, OFFSET_REG_A5(sp)
    ld a6, OFFSET_REG_A6(sp)
    ld a7, OFFSET_REG_A7(sp)

    // saved register
    ld s2, OFFSET_REG_S2(sp)
    ld s3, OFFSET_REG_S3(sp)
    ld s4, OFFSET_REG_S4(sp)
    ld s5, OFFSET_REG_S5(sp)
    ld s6, OFFSET_REG_S6(sp)
    ld s7, OFFSET_REG_S7(sp)
    ld s8, OFFSET_REG_S8(sp)
    ld s9, OFFSET_REG_S9(sp)
    ld s10, OFFSET_REG_S10(sp)
    ld s11, OFFSET_REG_S11(sp)

    // temporary register
    ld t3, OFFSET_REG_T3(sp)
    ld t4, OFFSET_REG_T4(sp)
    ld t5, OFFSET_REG_T5(sp)
    ld t6, OFFSET_REG_T6(sp)

    addi sp, sp, OFFSET_SIZE
.endm


#--------------------------------------------------------------------
# __dasics_uret: ret from user exception.
#--------------------------------------------------------------------
ENTRY(__dasics_uret)
    RESTORE_CONTEXT
    uret
END(__dasics_uret)

#--------------------------------------------------------------------
# dasics_ufault_entry: entry function before handling dasics faults.
#--------------------------------------------------------------------
ENTRY(dasics_ufault_entry) 
    SAVE_CONTEXT
    .option push
    .option norelax
    la gp, __global_pointer$
    .option pop     
    mv a0, sp
    la t0, dasics_ufault_handler
    la ra, __dasics_uret
    jr t0
    ret
END(dasics_ufault_entry)

#-----------------------------------------------------------------------
# __dasics_start_ufault_entry: deal fault when the dynamic.
#-----------------------------------------------------------------------
ENTRY(__dasics_start_ufault_entry)
    SAVE_CONTEXT
    .option push
    .option norelax
    la gp, __global_pointer$
    .option pop  
    mv a0, sp
    la ra, __dasics_uret
    la t0, _dasics_start_ufault_entry
    jr t0
    ret
END(__dasics_start_ufault_entry)

#-----------------------------------------------------------------------
# dasics_umaincall: pass arguments to umaincall helper.
#-----------------------------------------------------------------------
ENTRY(dasics_umaincall)
    # addi sp, sp, -16
    # sd   ra, 8(sp)
    SAVE_CONTEXT
    .option push
    .option norelax
    la gp, __global_pointer$
    .option pop     
    mv   a0, sp
    ld   t0, umaincall_helper
    jalr t0
    RESTORE_CONTEXT
    // .word 0x0003700b      # pulpret to t1
    jr t1
END(dasics_umaincall)


#-----------------------------------------------------------------------
# : pass arguments to umaincall helper.
#-----------------------------------------------------------------------
.section .text
.global lib_call
.type lib_call, @function

lib_call:
    addi   sp, sp, -8
    sd     ra, 0(sp)
    .word 0x0005108b    // dasicscall.jr ra, a0
    ld     ra, 0(sp)
    addi   sp, sp, 8
    ret


.section .data 
.local msg   
msg: .string "let's over...\n\r"

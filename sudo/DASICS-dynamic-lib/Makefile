# ------------------------------------------------------------
# DIR
# ------------------------------------------------------------
DIR_BUILD 		= ./build
DIR_START		= ./start
DIR_MLIB		= ./main_lib
DIR_MEM 		= ./memory
DIR_ECALL		= ./ecall
DIR_DYNAMIC		= ./dasics_dll
DIR_DASICS		= ./dasics
DIR_TEST		= ./test

# ------------------------------------------------------------
# the target file name
# ------------------------------------------------------------
DASICS_lib 		= $(DIR_BUILD)/dasics_lib.a

# ------------------------------------------------------------
# the compile logic
# ------------------------------------------------------------
CROSS_COMPILE = riscv64-unknown-linux-gnu-# /home/wanghan/riscv/riscv64-unknown-linux-gnu-nod/bin/riscv64-unknown-linux-gnu-

CFLAGS = -O2 -g -Iinclude -Itest_lib_header -Idasics_dll/include -Imemory/include -Iecall/include -w -DDASICS_LINUX #-DDASICS_COPY #-DDASICS_DEBUG

CC 		= $(CROSS_COMPILE)gcc
AR 		= $(CROSS_COMPILE)ar
OBJDUMP = $(CROSS_COMPILE)objdump
HEXDUMP = hexdump

# DASICS entry point
DASICS_LINKER 		= ld.lds 
USER_ENTRYPOINT 	= 0x1000000

SRC_TEST   			= $(wildcard $(DIR_TEST)*.c)

# ------------------------------------------------------------
# DASICS main logic file
# ------------------------------------------------------------
SRC_ENTRY  			= $(DIR_START)/entry.S
SRC_DAISCS 			= $(wildcard $(DIR_DASICS)/*.c) $(wildcard $(DIR_DASICS)/*.S) 
SRC_DASICS_USTART 	= $(wildcard $(DIR_START)/*.c)
SRC_DASICS_MEM  	= $(wildcard $(DIR_MEM)/*.c)
SRC_DASICS_ECALL	= $(wildcard $(DIR_ECALL)/*.c)
SRC_DASICS_LINK		= $(wildcard $(DIR_DYNAMIC)/*.c)

SRCS 				= $(SRC_ENTRY) \
					  $(SRC_DAISCS) \
					  $(SRC_DASICS_LINK) \
					  $(SRC_DASICS_USTART) \
					  $(SRC_TEST) \
					  $(SRC_DASICS_MEM) \
					  $(SRC_DASICS_ECALL)

# ------------------------------------------------------------
# DASICS inline my_printf, equal printf logically
# ------------------------------------------------------------
SRC_MY_PRINTF 	= $(DIR_MLIB)/my_printf.c
ELF_MY_PRINTF	= $(DIR_BUILD)/my_printf.o


.PHONY: all clean

# main logic
all: dirs my_printf $(DIR_BUILD)/%.o $(DASICS_lib)

dirs:
	@mkdir -p $(DIR_BUILD)

my_printf:
	$(CC) $(CFLAGS) -fno-builtin -nostdlib -c $(SRC_MY_PRINTF) -o $(ELF_MY_PRINTF)

$(DIR_BUILD)/%.o: $(SRCS)
	for file in $(SRCS); do \
		$(CC) $(CFLAGS) -c $$file -o $(DIR_BUILD)/$$(echo $$(basename $$file) | cut -d. -f1).o; \
	done

$(DASICS_lib): $(wildcard $(DIR_BUILD)/*.o)
	$(AR) rcs $@ $^

temp:
	$(CC) $(CFLAGS) ./test/main.c -o ./build/result -Tld.lds ./build/dasics_lib.a -e _set_utvec
	$(OBJDUMP) -d build/result > build/result.txt

clean:
	rm -rf build
